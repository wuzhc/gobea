// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ef2331b7e2
// Version Date: 2020-10-07T23:22:38Z

// Package http provides an HTTP client for the Article service.
package http

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/gogo/protobuf/jsonpb"

	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/pkg/errors"

	// This Service
	pb "article"
	"article/svc"
)

var (
	_ = endpoint.Chain
	_ = httptransport.NewClient
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = ioutil.NopCloser
)

// New returns a service backed by an HTTP server living at the remote
// instance. We expect instance to come from a service discovery system, so
// likely of the form "host:port".
func New(instance string, options ...httptransport.ClientOption) (pb.ArticleServer, error) {

	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}
	_ = u

	var DetailZeroEndpoint endpoint.Endpoint
	{
		DetailZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/detail/"),
			EncodeHTTPDetailZeroRequest,
			DecodeHTTPDetailResponse,
			options...,
		).Endpoint()
	}
	var RecordsZeroEndpoint endpoint.Endpoint
	{
		RecordsZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/records/"),
			EncodeHTTPRecordsZeroRequest,
			DecodeHTTPRecordsResponse,
			options...,
		).Endpoint()
	}
	var RemoveZeroEndpoint endpoint.Endpoint
	{
		RemoveZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/remove/"),
			EncodeHTTPRemoveZeroRequest,
			DecodeHTTPRemoveResponse,
			options...,
		).Endpoint()
	}
	var TopZeroEndpoint endpoint.Endpoint
	{
		TopZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/top/"),
			EncodeHTTPTopZeroRequest,
			DecodeHTTPTopResponse,
			options...,
		).Endpoint()
	}
	var RecommendsZeroEndpoint endpoint.Endpoint
	{
		RecommendsZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/recommends/"),
			EncodeHTTPRecommendsZeroRequest,
			DecodeHTTPRecommendsResponse,
			options...,
		).Endpoint()
	}
	var ReviewZeroEndpoint endpoint.Endpoint
	{
		ReviewZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/review/"),
			EncodeHTTPReviewZeroRequest,
			DecodeHTTPReviewResponse,
			options...,
		).Endpoint()
	}
	var PublishZeroEndpoint endpoint.Endpoint
	{
		PublishZeroEndpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "/publish"),
			EncodeHTTPPublishZeroRequest,
			DecodeHTTPPublishResponse,
			options...,
		).Endpoint()
	}
	var EditZeroEndpoint endpoint.Endpoint
	{
		EditZeroEndpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "/edit"),
			EncodeHTTPEditZeroRequest,
			DecodeHTTPEditResponse,
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		DetailEndpoint:     DetailZeroEndpoint,
		RecordsEndpoint:    RecordsZeroEndpoint,
		RemoveEndpoint:     RemoveZeroEndpoint,
		TopEndpoint:        TopZeroEndpoint,
		RecommendsEndpoint: RecommendsZeroEndpoint,
		ReviewEndpoint:     ReviewZeroEndpoint,
		PublishEndpoint:    PublishZeroEndpoint,
		EditEndpoint:       EditZeroEndpoint,
	}, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

// CtxValuesToSend configures the http client to pull the specified keys out of
// the context and add them to the http request as headers.  Note that keys
// will have net/http.CanonicalHeaderKey called on them before being send over
// the wire and that is the form they will be available in the server context.
func CtxValuesToSend(keys ...string) httptransport.ClientOption {
	return httptransport.ClientBefore(func(ctx context.Context, r *http.Request) context.Context {
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				r.Header.Set(k, v)
			}
		}
		return ctx
	})
}

// HTTP Client Decode

// DecodeHTTPDetailResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded DetailResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPDetailResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.DetailResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPRecordsResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded RecordsResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPRecordsResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.RecordsResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPRemoveResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded RemoveResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPRemoveResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.RemoveResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPTopResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded TopResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPTopResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.TopResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPRecommendsResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded RecommendsResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPRecommendsResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.RecommendsResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPReviewResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded ReviewResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPReviewResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.ReviewResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPPublishResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded PublishResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPPublishResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.PublishResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPEditResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded EditResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPEditResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.EditResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// HTTP Client Encode

// EncodeHTTPDetailZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a detail request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPDetailZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.DetailRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"detail",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPDetailOneRequest is a transport/http.EncodeRequestFunc
// that encodes a detail request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPDetailOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.DetailRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"detail",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRecordsZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a records request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRecordsZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RecordsRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"records",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("category_id", fmt.Sprint(req.CategoryId))

	values.Add("tag_id", fmt.Sprint(req.TagId))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("page", fmt.Sprint(req.Page))

	values.Add("sort_type", fmt.Sprint(req.SortType))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRecordsOneRequest is a transport/http.EncodeRequestFunc
// that encodes a records request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRecordsOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RecordsRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"records",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("category_id", fmt.Sprint(req.CategoryId))

	values.Add("tag_id", fmt.Sprint(req.TagId))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("page", fmt.Sprint(req.Page))

	values.Add("sort_type", fmt.Sprint(req.SortType))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRemoveZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a remove request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRemoveZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RemoveRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"remove",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRemoveOneRequest is a transport/http.EncodeRequestFunc
// that encodes a remove request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRemoveOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RemoveRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"remove",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTopZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a top request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTopZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TopRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"top",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTopOneRequest is a transport/http.EncodeRequestFunc
// that encodes a top request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTopOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TopRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"top",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRecommendsZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a recommends request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRecommendsZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RecommendsRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"recommends",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("category_id", fmt.Sprint(req.CategoryId))

	values.Add("tag_id", fmt.Sprint(req.TagId))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("page", fmt.Sprint(req.Page))

	values.Add("sort_type", fmt.Sprint(req.SortType))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPRecommendsOneRequest is a transport/http.EncodeRequestFunc
// that encodes a recommends request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPRecommendsOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.RecommendsRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"recommends",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("category_id", fmt.Sprint(req.CategoryId))

	values.Add("tag_id", fmt.Sprint(req.TagId))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("page", fmt.Sprint(req.Page))

	values.Add("sort_type", fmt.Sprint(req.SortType))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPReviewZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a review request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPReviewZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ReviewRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"review",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPReviewOneRequest is a transport/http.EncodeRequestFunc
// that encodes a review request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPReviewOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ReviewRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"review",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("article_id", fmt.Sprint(req.ArticleId))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPPublishZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a publish request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPPublishZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.PublishRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"publish",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.PublishRequest)

	toRet.CategoryId = req.CategoryId

	toRet.Title = req.Title

	toRet.Author = req.Author

	toRet.Link = req.Link

	toRet.File = req.File

	toRet.Keywords = req.Keywords

	toRet.Remark = req.Remark

	toRet.Content = req.Content

	toRet.EditorType = req.EditorType

	toRet.Code = req.Code

	toRet.Type = req.Type

	toRet.TagIds = req.TagIds

	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

// EncodeHTTPEditZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a edit request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPEditZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.EditRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"edit",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	// Set the body parameters
	var buf bytes.Buffer
	toRet := request.(*pb.EditRequest)

	toRet.ArticleId = req.ArticleId

	toRet.CategoryId = req.CategoryId

	toRet.Title = req.Title

	toRet.Author = req.Author

	toRet.Link = req.Link

	toRet.File = req.File

	toRet.Keywords = req.Keywords

	toRet.Remark = req.Remark

	toRet.Content = req.Content

	toRet.EditorType = req.EditorType

	toRet.Code = req.Code

	toRet.Type = req.Type

	toRet.TagIds = req.TagIds

	encoder := json.NewEncoder(&buf)
	encoder.SetEscapeHTML(false)
	if err := encoder.Encode(toRet); err != nil {
		return errors.Wrapf(err, "couldn't encode body as json %v", toRet)
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

func errorDecoder(buf []byte) error {
	var w errorWrapper
	if err := json.Unmarshal(buf, &w); err != nil {
		const size = 8196
		if len(buf) > size {
			buf = buf[:size]
		}
		return fmt.Errorf("response body '%s': cannot parse non-json request body", buf)
	}

	return errors.New(w.Error)
}

type errorWrapper struct {
	Error string `json:"error"`
}

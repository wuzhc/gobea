// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ef2331b7e2
// Version Date: 2020-10-07T23:22:38Z

// Package grpc provides a gRPC client for the Article service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "article"
	"article/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.ArticleServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var detailEndpoint endpoint.Endpoint
	{
		detailEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Detail",
			EncodeGRPCDetailRequest,
			DecodeGRPCDetailResponse,
			pb.DetailResponse{},
			clientOptions...,
		).Endpoint()
	}

	var recordsEndpoint endpoint.Endpoint
	{
		recordsEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Records",
			EncodeGRPCRecordsRequest,
			DecodeGRPCRecordsResponse,
			pb.RecordsResponse{},
			clientOptions...,
		).Endpoint()
	}

	var removeEndpoint endpoint.Endpoint
	{
		removeEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Remove",
			EncodeGRPCRemoveRequest,
			DecodeGRPCRemoveResponse,
			pb.RemoveResponse{},
			clientOptions...,
		).Endpoint()
	}

	var topEndpoint endpoint.Endpoint
	{
		topEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Top",
			EncodeGRPCTopRequest,
			DecodeGRPCTopResponse,
			pb.TopResponse{},
			clientOptions...,
		).Endpoint()
	}

	var recommendsEndpoint endpoint.Endpoint
	{
		recommendsEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Recommends",
			EncodeGRPCRecommendsRequest,
			DecodeGRPCRecommendsResponse,
			pb.RecommendsResponse{},
			clientOptions...,
		).Endpoint()
	}

	var reviewEndpoint endpoint.Endpoint
	{
		reviewEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Review",
			EncodeGRPCReviewRequest,
			DecodeGRPCReviewResponse,
			pb.ReviewResponse{},
			clientOptions...,
		).Endpoint()
	}

	var publishEndpoint endpoint.Endpoint
	{
		publishEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Publish",
			EncodeGRPCPublishRequest,
			DecodeGRPCPublishResponse,
			pb.PublishResponse{},
			clientOptions...,
		).Endpoint()
	}

	var editEndpoint endpoint.Endpoint
	{
		editEndpoint = grpctransport.NewClient(
			conn,
			"article.Article",
			"Edit",
			EncodeGRPCEditRequest,
			DecodeGRPCEditResponse,
			pb.EditResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		DetailEndpoint:     detailEndpoint,
		RecordsEndpoint:    recordsEndpoint,
		RemoveEndpoint:     removeEndpoint,
		TopEndpoint:        topEndpoint,
		RecommendsEndpoint: recommendsEndpoint,
		ReviewEndpoint:     reviewEndpoint,
		PublishEndpoint:    publishEndpoint,
		EditEndpoint:       editEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCDetailResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC detail reply to a user-domain detail response. Primarily useful in a client.
func DecodeGRPCDetailResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.DetailResponse)
	return reply, nil
}

// DecodeGRPCRecordsResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC records reply to a user-domain records response. Primarily useful in a client.
func DecodeGRPCRecordsResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RecordsResponse)
	return reply, nil
}

// DecodeGRPCRemoveResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC remove reply to a user-domain remove response. Primarily useful in a client.
func DecodeGRPCRemoveResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RemoveResponse)
	return reply, nil
}

// DecodeGRPCTopResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC top reply to a user-domain top response. Primarily useful in a client.
func DecodeGRPCTopResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.TopResponse)
	return reply, nil
}

// DecodeGRPCRecommendsResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC recommends reply to a user-domain recommends response. Primarily useful in a client.
func DecodeGRPCRecommendsResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RecommendsResponse)
	return reply, nil
}

// DecodeGRPCReviewResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC review reply to a user-domain review response. Primarily useful in a client.
func DecodeGRPCReviewResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ReviewResponse)
	return reply, nil
}

// DecodeGRPCPublishResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC publish reply to a user-domain publish response. Primarily useful in a client.
func DecodeGRPCPublishResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.PublishResponse)
	return reply, nil
}

// DecodeGRPCEditResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC edit reply to a user-domain edit response. Primarily useful in a client.
func DecodeGRPCEditResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.EditResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCDetailRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain detail request to a gRPC detail request. Primarily useful in a client.
func EncodeGRPCDetailRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DetailRequest)
	return req, nil
}

// EncodeGRPCRecordsRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain records request to a gRPC records request. Primarily useful in a client.
func EncodeGRPCRecordsRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RecordsRequest)
	return req, nil
}

// EncodeGRPCRemoveRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain remove request to a gRPC remove request. Primarily useful in a client.
func EncodeGRPCRemoveRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RemoveRequest)
	return req, nil
}

// EncodeGRPCTopRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain top request to a gRPC top request. Primarily useful in a client.
func EncodeGRPCTopRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.TopRequest)
	return req, nil
}

// EncodeGRPCRecommendsRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain recommends request to a gRPC recommends request. Primarily useful in a client.
func EncodeGRPCRecommendsRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RecommendsRequest)
	return req, nil
}

// EncodeGRPCReviewRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain review request to a gRPC review request. Primarily useful in a client.
func EncodeGRPCReviewRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ReviewRequest)
	return req, nil
}

// EncodeGRPCPublishRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain publish request to a gRPC publish request. Primarily useful in a client.
func EncodeGRPCPublishRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PublishRequest)
	return req, nil
}

// EncodeGRPCEditRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain edit request to a gRPC edit request. Primarily useful in a client.
func EncodeGRPCEditRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.EditRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
